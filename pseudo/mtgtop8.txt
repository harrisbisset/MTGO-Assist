CLASS DRIVER_CONTROLLER:

    CONSTRUCTOR(self)
        self.url = "https://mtgtop8.com/search"

        self.driver = webdriver.CONNECT()
    
    METHODS(self)
	
    	method RETURN_DICT_NAMES(self, deckLists, date):
            
            self.GET_SITE()
            self.CLEAR_COOKIE_BANNER()
            self.INPUT_FORM_DATA(format, self.REFACTOR_DECKLISTS(deckLists), date)

            deckNames = self.GET_DECK_NAMES()

            if deckNames are unknown:
                self.QUIT()
                return deckNames

            dictNames = self.GET_DICT_NAMES(deckNames)

            return dictNames



    	method GET_SITE(self):
            self.driver.get(self.URL)



    	method INPUT_FORM_DATA(self, deckList, date):
            
            self.driver.find(SIDEBOARD).CLICK()

            textarea = self.driver.FIND(CARDS)

            for card in deckList:
                textarea.TYPE(card + RETURN)


            self.driver.FIND(DATE_ELEMENT).TYPE(date)

            self.driver.FIND(SUBMIT).CLICK()



        method clearCookieBanner(self):
            self.driver.find(COOKIE_WINDOW).CLICK()



    	method getDeckNames(self):
            deckNames = []
        
            decks = length(self.driver.FIND_ALL(DECKS_ON_PAGE))
        
            if decks < 1:
            	return 'unknown'
        
            if decks > 5:
            	decks = 5

            for deck = 1 To length(decks):
            	deckNames.append(self.driver.FIND(DECK_NAME).TEXT)

            return deckNames



    	method QUIT_DC(self):
            self.driver.QUIT()



    	method REFACTOR_DECKLISTS(self, deckLists):
            cards = associative_array()
        
            for game in deckLists:
            	for card in game:
                    if cards[card] exists:
                        cards[card] = cards[card]+1
                    else:
                        cards[card] = 1

            return cards
        


    	method GET_DICT_NAMES(self, deckNames):
	
            dictNames = {deckName:0 for deckName in deckNames}

            for deckName in deckNames:
                dictNames[deckName] = dictNames[deckName] + 1

            for deckName in dictNames:
                dictNames[deckName] = dictNames[deckName] / length(deckNames)

        return dictNames
