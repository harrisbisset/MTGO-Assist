CLASS MatchRecord:

    CONSTRUCTOR(self):
        instansiate_object

    METHODS(self):
    	method GET_DECKLISTS(self, filename):
            decklists = []
            extra = {'play':[], 'startingHands':[], 'winner':[]}

            self.matchLog = filename.DECODE()

            attempt:
            	self.GET_PLAYERS()
            if error:
            	return None

            self.FORMAT_LINES()

            if length(self.matchLog) < 2:
            	return None


            for game in self.matchLog:
            	if game doesn't exist:
                    exit loop
            
                gameDecklists = self.GET_DECKLISTS(game)
            	if gameDecklists doesn't exist:
                    exit loop

            	decklists.append(gameDecklists)

            	attmept:
                    extra['play'].append(self.GET_ON_PLAY(game))
            	if error:
                    extra['play'].append('unknown')
            
            	attempt:
                    extra['startingHands'].append(self.GET_STARTING_HANDS(game))
            	if error:
                    extra['startingHands'].append('unknown')

            	extra['winner'].append(self.getWinner(game))

        return decklists, extra, self.matchLog, self.players




    method GET_PLAYERS(self):
        players = self.matchLog.FIND_ALL(('@P(\S+) rolled')
        
        #the first player in the game log is always the user
        self.players = list(players)



    method FORMAT_LINES(self):
        filteredMatch = self.matchLog.REMOVE_NON_ASCII
        filteredMatch = filteredMatch.REMOVE_RANDOM_CHARACTERS
        filteredMatch = filteredMatch.SPLIT_BY_GAME
	filteredMatch = filteredMatch.SPLIT_BY_TURN
        self.matchLog = filteredMatch




    method GET_DECKLISTS(self, game):
        decklists = {self.players[0]: dict(), self.players[1]: dict()}

        playCardPattenMatches = self.matchLog.GET_PLAYED_CARDS
	playCardPattern = '('+self.players[0]+'|'+self.players[1]+') (casts|plays|discards|cycles) (@\[([a-zA-Z\s,-]+)@:[0-9,]+:@\])'
	revealedCardPattern = '('+self.players[0]+'|'+self.players[1]+') (reveals) (@\[([a-zA-Z\s,-]+)@:[0-9,]+:@\])'

        for turn in game:

	    playCardMatches = playCardPattern.FIND_ALL(turn)
            revealedMatches = revealedCardPattern.FIND_ALL(turn)


            for cardPlayed in playCardMatches:
	    	//cardPlayer is stored as [player, card]
		
                if cardPlayed[1] in revealedMatches:
                    revealedMatches.remove(revealedMatches.INDEX([cardPlayed[1]))
		    
                if cardPlayed[1] in decklists[card]:
                    decklists[cardPlayed[0]][cardPlayed[1]] += 1
                else:
                    decklists[cardPlayed[0]][cardPlayed[1]] = 1


            for cardRevealed in revealedMatches:
	    	//cardRevealed is stored as [player, card]

                if cardRevealed[1] in decklists[cardRevealed[0]]:
                    decklists[cardRevealed[0]][cardRevealed[1]] += 1
                else:
                    decklists[cardRevealed[0]] = 1


        return decklists




     method GET_ON_PLAY(self, game):
        onPlay = game.SEARCH('(\S+) chooses to play first')
        return onPlay




    method GET_STARTING_HANDS(self, game):
        startingHands = self.matchLog.FIND_ALL_STARTING_HANDS_IN_GAME
        return startingHands




    method GET_WINNER(self, game):
        concededPattern = '(\S+) has conceded'
        winsPattern = '(\S+) wins the game'
        losesPattern = '(\S+) loses the game'

        conceded = concededPattern.SEARCH(concededPattern)
        wins = winsPattern.SEARCH(winsPattern)
        loses = losesPattern.SEARCH(losesPattern)

        if a player wins:
            return wins
        else if a player conceded:
	    return conceded
        else if a player loses:
            return loses
        else:
            return 'NA'
