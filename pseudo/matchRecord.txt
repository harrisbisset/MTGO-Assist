CLASS MatchRecord:

    CONSTRUCTOR(self):
        instansiate_object

    METHODS(self)
    	method GET_DECKLISTS(self, filename):
            decklists = array()
            extra = {'play':[], 'startingHands':[], 'winner':[]}

            self.matchLog = filename.decode()

            attempt:
            	self.GET_PLAYERS()
            if error:
            	return None

            self.FORMAT_LINES()

            if length(self.matchLog) < 2:
            	return None, None, None, None


            for game in self.matchLog:
            	if game doesn't exist:
                    break
            
                gameDecklists = self.GET_DECKLISTS(game)
            	if gameDecklists doesn't exist:
                    break

            	decklists.add_to_array(gameDecklists)

            	attmept:
                    extra['play'].add_to_array(self.GET_ON_PLAY(game))
            	if error:
                    extra['play'].add_to_array('unknown')
            
            	attempt:
                    extra['startingHands'].add_to_array(self.GET_STARTING_HANDS(game))
            	if error:
                    extra['startingHands'].add_to_array('unknown')

            	extra['winner'].add_to_array(self.getWinner(game))

        return decklists, extra, self.matchLog, self.players




    def getPlayers(self):
        players = re.compile('@P(\S+) rolled').findall(self.matchLog)
        
        #the first player in the game log is always the user
        self.players = list(players)



    def formatLines(self):
        filteredMatch = self.matchLog.remove_non_ascii
        filteredMatch = filteredMatch.remove_random_characters
        filteredMatch = filteredMatch.split_by_game
	filteredMatch = filteredMatch.split_by_turn
        self.matchLog = filteredMatch




    def getDeckLists(self, game):
        decklists = {self.players[0]: dict(), self.players[1]: dict()}

        #stores cards each player has played, revealed, discarded, cycled
        #game actions are formatted as @P(player_name) (casts|plays|discards|cycles|reveals)
        #card names are formatted as @[Card Name@:numbers,numbers:@]
        playCardPattern = re.compile(f'({self.players[0]}|{self.players[1]}) (casts|plays|discards|cycles) (@\[([a-zA-Z\s,-]+)@:[0-9,]+:@\])')
        revealedCardPattern = re.compile(f'({self.players[0]}|{self.players[1]}) (reveals) (@\[([a-zA-Z\s,-]+)@:[0-9,]+:@\])')

        for turn in game:
            #finds matched patterns
            playCardMatches = playCardPattern.findall(' '.join(turn))
            revealedMatches = revealedCardPattern.findall(' '.join(turn))


            for actions in playCardMatches:

                #if a card has been revealed, and has interacted with the game, remove it from revealedMatches
                if actions[3] in revealedMatches:
                    revealedMatches.pop(revealedMatches.index(actions[3]))

                #adds card to decklists
                if actions[3] in decklists[actions[0]]:
                    decklists[actions[0]][actions[3]] += 1
                else:
                    decklists[actions[0]].update({actions[3]:1})


            for revealed in revealedMatches:

                #adds card to decklists
                if revealed[3] in decklists[revealed[0]]:
                    decklists[revealed[0]][revealed[3]] += 1
                else:
                    decklists[revealed[0]].update({revealed[3]:1})


        return decklists




    def getOnPlay(self, game):
        # Who is on the play in this game?
        # Returns 'player' or 'opponent'
        onPlay = re.compile('(\S+) chooses to play first').search(' '.join(game[0])).group(1)
        return self.players[self.players.index(onPlay)]




    def getStartingHands(self, game):

        #format [(player1, cards), (player2, cards)]
        regex = re.compile(f'({self.players[0]}|{self.players[1]}) begins the game with (\w+) cards in hand | ({self.players[0]}|{self.players[1]}) puts.+on the bottom of their library and begins the game with (\w+) cards in hand')
        startingHands = re.findall(regex, ' '.join(game[0]))
        startingHands = [tuple(b for b in i if len(b) > 1) for i in startingHands]
        return startingHands




    def getWinner(self, game):

        #determines the winner or loser
        concededPattern = re.compile('(\S+) has conceded')
        winsPattern = re.compile('(\S+) wins the game')
        losesPattern = re.compile('(\S+) loses the game')

        conceded = concededPattern.search(' '.join([' '.join(i) for i in game]))
        wins = winsPattern.search(' '.join([' '.join(i) for i in game]))
        loses = losesPattern.search(' '.join([' '.join(i) for i in game]))

        if wins:
            return self.players[self.players.index(wins.group(1))][0]
        elif conceded:
            return [i for i in self.players if i not in self.players[self.players.index(conceded.group(1))]][0]
        elif loses:
            return self.players[self.players.index(loses.group(1))][0]
        else:
            return 'NA'
